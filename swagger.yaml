swagger: "2.0"
info:
  description: "This is a book repository for Jóhanna the húsfreyja at Efri-Brú"
  version: "1.0.0"
  title: "Johanna's Library"
  contact:
    email: "birkirb15@ru.is"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "127.0.0.1:8080"
basePath: "/api/v1"
tags:
- name: "users"
  description: "Handling users"
- name: "books"
  description: "Handling books"
- name: "loans"
  description: "Handling the loans of books"
- name: "book reviews"
  description: "Reviews of books"
schemes:
- "http"
paths:
  /users:
    post:
      tags:
        - "users"
      summary: "Add new user to the database"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object, that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/AddUserViewModel"
      responses:
        405:
          description: "Invalid input"
    get:
      tags:
      - "users"
      summary: "Gets all users"
      description: ""
      operationId: "getAllUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserViewModel"
  /users/{userId}:
    get:
      tags:
      - "users"
      summary: "Get user by user ID"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The ID of the user that needs to be fetched"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserViewModel"
        400:
          description: "Invalid user id supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "Update user"
      description: ""
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of the user that needs to be updated"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/AddUserViewModel"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The Id of the user that needs to be deleted"
        required: true
        type: "integer"
        format: "int32"
      responses:
        400:
          description: "Invalid user id supplied"
        404:
          description: "User not found"
          
  /books:
    post:
      tags:
        - "books"
      summary: "Add new book to the database"
      description: ""
      operationId: "addBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book object, that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/AddBookViewModel"
      responses:
        405:
          description: "Invalid input"
    get:
      tags:
      - "books"
      summary: "Gets all books"
      description: ""
      operationId: "getAllBooks"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookViewModel"
  /books/{bookId}:
    get:
      tags:
      - "books"
      summary: "Get book by book ID"
      description: ""
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The ID of the book that needs to be fetched"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BookViewModel"
        400:
          description: "Invalid book id supplied"
        404:
          description: "Book not found"
    put:
      tags:
      - "books"
      summary: "Update book"
      description: ""
      operationId: "updateBook"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Id of the book that needs to be updated"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "body"
        description: "Updated book object"
        required: true
        schema:
          $ref: "#/definitions/AddBookViewModel"
      responses:
        400:
          description: "Invalid book supplied"
        404:
          description: "Book not found"
    delete:
      tags:
      - "books"
      summary: "Delete book"
      description: ""
      operationId: "deleteBook"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The id of the book that needs to be deleted"
        required: true
        type: "integer"
        format: "int32"
      responses:
        400:
          description: "Invalid book id supplied"
        404:
          description: "Book not found"
  /books/{bookId}/return:
    put:
      tags:
      - "loans"
      summary: "Registers specific book as returned by user today"
      description: ""
      operationId: "returnBook"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The ID of the book that needs to be returned"
        required: true
        type: "integer"
        format: "int32"
      responses:
        400:
          description: "Book is not being loaned or has already been returned"
        404:
          description: "Book not found"
  /books/{bookId}/loans:
    get:
      tags:
      - "loans"
      summary: "Get the loan history of the book, list of users"
      description: ""
      operationId: "getBookLoanHistory"
      produces: 
      - "application/json"
      parameters: 
      - name: "bookId"
        in: "path"
        description: "The ID of the book that needs to be fetched"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookLoanViewModel"
        400:
          description: "Invalid book id supplied"
        404:
          description: "Book not found"
  /books/{bookId}/loans/{userId}:
    post:
      tags:
      - "loans"
      summary: "Register book as loaned/borrowed by user"
      description: ""
      operationId: "loanBook"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The ID of the book that needs to be loaned"
        required: true
        type: "integer"
        format: "int32"
      - name: "userId"
        in: "path"
        description: "The ID of the user that needs to loan the specifed book"
        required: true
        type: "integer"
        format: "int32"
      responses:
        400:
          description: "Invalid id"
        404:
          description: "book or user not found"
    put:
      tags:
      - "loans"
      summary: "Changes dates for book that is loaned/borrowed by user"
      description: ""
      operationId: "updateBookLoan"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The ID of the book that needs to be updated"
        required: true
        type: "integer"
        format: "int32"
      - name: "userId"
        in: "path"
        description: "The ID of the user that's loan needs be updated"
        required: true
        type: "integer"
        format: "int32"
      - name: "body"
        in: "body"
        description: "Date loaned and date returned values"
        required: true
        schema:
          $ref: "#/definitions/UpdateBookLoanViewModel"
      responses:
        400:
          description: "Invalid id"
        404:
          description: "book or user not found"
    delete:
      tags:
      - "loans"
      summary: "Delete a loan that was registered. Should not be used to return books."
      description: ""
      operationId: "deleteLoan"
      produces: 
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The ID of the book that needs to be loaned"
        required: true
        type: "integer"
        format: "int32"
      - name: "userId"
        in: "path"
        description: "The ID of the user that needs to loan the specifed book"
        required: true
        type: "integer"
        format: "int32"
      responses:
        400:
          description: "Invalid book id or user id supplied"
        404:
          description: "Book not found or user not found"
  /books/loans/{date}:
    get:
      tags:
      - "books"
      - "loans"
      summary: "Get list of books that are loaned out/unavailable at specified date or today by default and the user that has loaned it"
      description: ""
      operationId: "getLoanedBooksByDate"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "The date specified to look up available books"
        required: true
        type: "string"
        format: "date"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookAndUserLoanViewModel"
        400:
          description: "Invalid date supplied"
        404:
          description: "Book not found"
  /users/loans/{date}:
    get:
      tags:
      - "users"
      - "loans"
      summary: "Get list of users that have a borrowed book at specified date or today by default. Includes the list of books that the user has loaned."
      description: ""
      operationId: "getUserAndLoanedBooksByDate"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "The date specified to look up users that have borrowed a book"
        required: true
        type: "string"
        format: "date"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserAndBookLoansViewModel"
        400:
          description: "Invalid date supplied"
        404:
          description: "No users found"
  /users/loans/{date}/monthOverdue:
    get:
      tags:
      - "users"
      - "loans"
      summary: "Get list of users that have a book borrowed for a month or more at given date, defaults to today"
      description: ""
      operationId: "getUsersWithMonthOverdueBooksByDate"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "The date specified to look up users that have borrowed a book"
        required: true
        type: "string"
        format: "date"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserViewModel"
        400:
          description: "Invalid date supplied"
        404:
          description: "No users found"
  /books/{bookId}/reviews:
    get:
      tags:
      - "book reviews"
      summary: "Gets all book reviews"
      description: ""
      operationId: "getBookReviewsByBookId"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The id of the book that the reviews belong to"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookReviewViewModel"
  /books/{bookId}/reviews/{userId}:
    post:
      tags:
      - "book reviews"
      summary: "Add new or update book review"
      description: ""
      operationId: "addReview"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The ID of the book that the review belongs to"
        required: true
        type: "integer"
        format: "int32"
      - name: "userId"
        in: "path"
        description: "The ID of the user that the review belongs to"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "body"
        description: "Review object, that needs to be added to book"
        required: true
        schema:
          $ref: "#/definitions/AddBookReviewViewModel"
      responses:
        405:
          description: "Invalid input"
    delete:
      tags:
      - "book reviews"
      summary: "Delete book review"
      description: ""
      operationId: "deleteBookReview"
      produces: 
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The ID of the book that the review belongs to"
        required: true
        type: "integer"
        format: "int32"
      - name: "userId"
        in: "path"
        description: "The ID of the user that the review belongs to"
        required: true
        type: "integer"
        format: "int32"
      responses:
        400:
          description: "Invalid book id or user id supplied"
        404:
          description: "Book not found or user not found"
  /users/{userId}/reviews:
    get:
      tags:
      - "book reviews"
      summary: "Gets all book reviews that belong to specific user"
      description: ""
      operationId: "getBookReviewsByUserId"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id of the user that the reviews belong to"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookAndBookReviewViewModel"
  /books/recommendations:
    get:
      tags:
      - "books"
      summary: "Gets list of books sorted by rating, excludes unrated books"
      description: ""
      operationId: "getBooksByRating"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookViewModel"
definitions:
  AddUserViewModel:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      address:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
  UserViewModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      firstName:
        type: "string"
      lastName:
        type: "string"
      address:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
  AddBookViewModel:
    type: "object"
    properties:
      title:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      datePublished:
        type: "string"
        format: "date-time"
      isbn:
        type: "string"
  BookViewModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      datePublished:
        type: "string"
        format: "date-time"
      isbn:
        type: "string"
  BookAndLoanViewModel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      datePublished:
        type: "string"
        format: "date-time"
      isbn:
        type: "string"
      dateLoaned:
        type: "string"
        format: "date-time"
      dateReturned:
        type: "string"
        format: "date-time"
  BookAndUserLoanViewModel:
    type: "object"
    properties:
      book: {
        "$ref": "#/definitions/BookViewModel"
      }
      user: {
        "$ref": "#/definitions/UserViewModel"
      }
      dateLoaned:
        type: "string"
        format: "date-time"
  UserAndBookLoansViewModel:
    type: "object"
    description: "User and list of books"
    properties:
      user: {
        "$ref": "#/definitions/UserViewModel"
      }
      books: {
        type: "array",
        items: {
          "$ref": "#/definitions/BookAndLoanViewModel"
        }
      }
  BookLoanViewModel:
    type: "object"
    description: "User and dates when book was loaned and possibly returned"
    properties:
      user: {
        "$ref": "#/definitions/UserViewModel"
      }
      dateLoaned:
        type: "string"
        format: "date-time"
      dateReturned:
        type: "string"
        format: "date-time"
  UpdateBookLoanViewModel:
    type: "object"
    properties:
      dateLoaned:
        type: "string"
        format: "date-time"
      dateReturned:
        type: "string"
        format: "date-time"
  BookReviewViewModel:
    type: "object"
    properties:
      user: {
        "$ref": "#/definitions/UserViewModel"
      }
      rating:
        type: "integer"
        format: "int32"
      review:
        type: "string"
  AddBookReviewViewModel:
    type: "object"
    properties:
      rating:
        type: "integer"
        format: "int32"
      review:
        type: "string"
  BookAndBookReviewViewModel:
    type: "object"
    properties:
      book: {
        "$ref": "#/definitions/BookViewModel"
      }
      rating:
        type: "integer"
        format: "int32"
      review:
        type: "string"